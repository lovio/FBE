//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: variants.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package variants

import "errors"
import "../fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Fast Binary Encoding Expr field model
type FieldModelExpr struct {
    // Field model buffer
    buffer *fbe.Buffer
    // Field model buffer offset
    offset int
}

// Create a new Expr field model
func NewFieldModelExpr(buffer *fbe.Buffer, offset int) *FieldModelExpr {
    fbeResult := FieldModelExpr{buffer: buffer, offset: offset}
    return &fbeResult
}

// 4 bits, store varaint offset
func (fm *FieldModelExpr) FBESize() int { return 4 }

// Get the field body size
func (fm *FieldModelExpr) FBEBody() int {
    // variant type_index, given type's fbe_size not included
    // The type of the variant is unknown until it is run.
    fbeResult := 4 
    return fbeResult
}

// Get the field extra size
func (fm *FieldModelExpr) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody()

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field offset
func (fm *FieldModelExpr) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelExpr) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelExpr) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelExpr) FBEUnshift(size int) { fm.offset -= size }

// Check if the variant value is valid
func (fm *FieldModelExpr) Verify() bool { return fm.VerifyType(true) }

// Check if the variant and its value are valid
func (fm *FieldModelExpr) VerifyType(fbeVerifyType bool) bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeVariantOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeVariantOffset == 0) || ((fm.buffer.Offset() + fbeVariantOffset + 4) > fm.buffer.Size()) {
        return false
    }

    fbeVariantTypeIndex := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset))
    if (fbeVariantTypeIndex < 0 || fbeVariantTypeIndex >= 3) {
        return false
    }

    fm.buffer.Shift(fbeVariantOffset)
    // TODO(liuqi): add verify variant-type
    fm.buffer.Unshift(fbeVariantOffset)
    return true
}


// Get the struct value
func (fm *FieldModelExpr) Get() (Expr, error) {
    fbeResult := NewExpr()
    return fbeResult, fm.GetValue(&fbeResult)
}

// Get the struct value by the given pointer
func (fm *FieldModelExpr) GetValue(fbeValue *Expr) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return nil
    }

    fbeVariantOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeVariantOffset == 0) || ((fm.buffer.Offset() + fbeVariantOffset + 4) > fm.buffer.Size()) {
        return errors.New("model is broken")
    }

    fbeVariantTypeIndex := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset))
    if (fbeVariantTypeIndex < 0 || fbeVariantTypeIndex >= 3) {
        return errors.New("model is broken")
    }

    fm.buffer.Shift(fbeVariantOffset)
    buffer := fm.buffer
    switch(fbeVariantTypeIndex) {
    case 0:
        vfm := fbe.NewFieldModelBool(buffer, 4) // fm.FBESize() = 4
        fbeValue, _ = vfm.Get()
    case 1:
        vfm := fbe.NewFieldModelInt32(buffer, 4) // fm.FBESize() = 4
        fbeValue, _ = vfm.Get()
    case 2:
        vfm := fbe.NewFieldModelString(buffer, 4) // fm.FBESize() = 4
        fbeValue, _ = vfm.Get()
    default:
        return errors.New("model is broken, invalid variant_type_index")
    }
    fm.buffer.Unshift(fbeVariantOffset)

    return nil
}


// Set the struct value (begin phase)
func (fm *FieldModelExpr) SetBegin(variantTypeFBESize int, variantTypeIndex int) (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, errors.New("model is broken")
    }

    fbeVariantSize := fm.FBEBody() + variantTypeFBESize
    fbeVariantOffset := fm.buffer.Allocate(fbeVariantSize) - fm.buffer.Offset()
    if (fbeVariantOffset <= 0) || ((fm.buffer.Offset() + fbeVariantOffset + fbeVariantSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), uint32(fbeVariantOffset))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset, uint32(variantTypeIndex))

    fm.buffer.Shift(fbeVariantOffset)
    return fbeVariantOffset, nil
}

// Set the struct value
func (fm *FieldModelExpr) Set(fbeValue Expr) error {
    var fbeBegin int
    var err error

    switch v := fbeValue.(type) {
    case bool:
        if fbeBegin, err = fm.SetBegin(fm.FBESize(), 0); err != nil {
            return err
        }
        buffer := fm.buffer
        vfm := fbe.NewFieldModelBool(buffer, 4) // fm.FBESize() = 4
        if err = vfm.Set(&v); err != nil {
            return err
        }
    case int32:
        if fbeBegin, err = fm.SetBegin(fm.FBESize(), 1); err != nil {
            return err
        }
        buffer := fm.buffer
        vfm := fbe.NewFieldModelInt32(buffer, 4) // fm.FBESize() = 4
        if err = vfm.Set(&v); err != nil {
            return err
        }
    case string:
        if fbeBegin, err = fm.SetBegin(fm.FBESize(), 2); err != nil {
            return err
        }
        buffer := fm.buffer
        vfm := fbe.NewFieldModelString(buffer, 4) // fm.FBESize() = 4
        if err = vfm.Set(&v); err != nil {
            return err
        }
    default:
        return errors.New("unknown variant type")
    }
    fm.buffer.Unshift(fbeBegin)
    return err
}

